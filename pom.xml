<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>uk.nhs.ciao</groupId>
	<artifactId>ciao-parent</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<description>A parent maven module to provide default dependency management and build settings for ciao modules</description>

	<modules>
		<module>ciao-parent-support</module>
	</modules>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<activemq.version>5.10.2</activemq.version> <!-- Matches camel major version -->
		<camel.version>2.13.4</camel.version> <!-- last version to run against 1.6 -->
		<commons-io.version>2.4</commons-io.version>
		<commons-lang3.version>3.4</commons-lang3.version>
		<digester.version>3.2</digester.version>
		<guava.version>18.0</guava.version>
		<jackson.version>2.5.4</jackson.version>
		<junit.version>4.12</junit.version>
		<joda-time.version>2.8.2</joda-time.version>
		<log4j.version>1.2.17</log4j.version>
		<mime4j.version>0.7.2</mime4j.version>
		<mockito.version>1.10.19</mockito.version>
		<pdfbox.version>1.8.9</pdfbox.version>
		<powermock.version>1.6.2</powermock.version>
		<slf4j.version>1.7.12</slf4j.version>
		<spring.version>4.1.6.RELEASE</spring.version>
		<tika.version>1.8</tika.version>
		<unitils.version>3.4.2</unitils.version>

		<!-- Sonar -->		
		<sonar.jacoco.reportPath>${project.build.directory}/jacoco.exec</sonar.jacoco.reportPath>
		<!-- Replace with "${project.basedir}/../target/jacoco.exec" for multi-module projects -->

		<!-- CIAO main configuration / bin packaging -->
		<!-- Reverse the true/false values for CIP modules - defaults are for libraries -->
		<ciao.skipBinArchive>true</ciao.skipBinArchive>
		<ciao.addClasspath>false</ciao.addClasspath>

		<!-- Set to the main class for CIP modules -->
		<ciao.main></ciao.main>
	</properties>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.5.1</version>
					<configuration>
						<source>1.6</source>
						<target>1.6</target>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.6</version>
					<configuration>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>

				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.4</version>
				</plugin>

				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.5.4</version>
				</plugin>

				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.12.4</version>
				</plugin>

				<plugin>
					<artifactId>maven-remote-resources-plugin</artifactId>
					<version>1.5</version>
				</plugin>

				<plugin>
					<groupId>org.apache.camel</groupId>
					<artifactId>camel-maven-plugin</artifactId>
					<version>${camel.version}</version>
				</plugin>

				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>0.7.4.201502262128</version>
				</plugin>
			</plugins>
		</pluginManagement>
		
		<!-- Configure camel plugin to start the main CIAO class (primarily for CIPs) -->
		<plugins>
			<plugin>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-maven-plugin</artifactId>
				<configuration>
					<mainClass>${ciao.main}</mainClass>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<dependencyManagement>
		<dependencies>
			<!-- For parsing API -->
			<dependency>
				<groupId>org.apache.tika</groupId>
				<artifactId>tika-parsers</artifactId>
				<version>${tika.version}</version>
			</dependency>

			<!-- For *.pdf format -->
			<dependency>
				<groupId>org.apache.pdfbox</groupId>
				<artifactId>pdfbox</artifactId>
				<version>${pdfbox.version}</version>
			</dependency>

			<!-- For XML configuration / dependency injection -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
			</dependency>

			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-spring</artifactId>
				<version>${camel.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-jackson</artifactId>
				<version>${camel.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-hazelcast</artifactId>
				<version>${camel.version}</version>
			</dependency>
			
			<dependency>
			    <groupId>org.apache.camel</groupId>
			    <artifactId>camel-http4</artifactId>
			    <version>${camel.version}</version>
			</dependency>
			
			<dependency>
			    <groupId>org.apache.camel</groupId>
			    <artifactId>camel-jetty</artifactId>
			    <version>${camel.version}</version>
			</dependency>
			
			<dependency>
			    <groupId>org.apache.camel</groupId>
			    <artifactId>camel-freemarker</artifactId>
			    <version>${camel.version}</version>
			</dependency>
			
			<dependency>
			    <groupId>org.apache.camel</groupId>
			    <artifactId>camel-jms</artifactId>
			    <version>${camel.version}</version>
			</dependency>
			
			<dependency>
			    <groupId>org.apache.camel</groupId>
			    <artifactId>camel-ldap</artifactId>
			    <version>${camel.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-camel</artifactId>
				<version>${activemq.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.apache.james</groupId>
				<artifactId>apache-mime4j-core</artifactId>
				<version>${mime4j.version}</version>
			</dependency>
			
			<dependency>
			    <groupId>org.apache.commons</groupId>
			    <artifactId>commons-digester3</artifactId>
			    <version>${digester.version}</version>
		    </dependency>
		    
		    <dependency>
		    	<groupId>joda-time</groupId>
		    	<artifactId>joda-time</artifactId>
		    	<version>${joda-time.version}</version>
		    </dependency>
		    
		    <dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>

			<!-- logging -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${slf4j.version}</version>
			</dependency>

			<!-- Testing -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>

			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>${mockito.version}</version>
			</dependency>

			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-module-junit4</artifactId>
				<version>${powermock.version}</version>
			</dependency>

			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-api-mockito</artifactId>
				<version>${powermock.version}</version>
			</dependency>

			<dependency>
				<groupId>org.unitils</groupId>
				<artifactId>unitils-core</artifactId>
				<version>${unitils.version}</version>
			</dependency>

		</dependencies>
	</dependencyManagement>
	
	<profiles>
		<!--
			Creates a zip archive containing the main project artifact, library dependencies, license,
			and basic README with details of main-class / classpath
			Related properties: ciao.skipBinArchive, ciao.main
		-->
		<profile>
			<id>bin-archive</id>
			<build>
				<plugins>
					<!-- Create an executable jar executable with configured class-path -->
					<plugin>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<archive>
								<manifest>
									<mainClass>${ciao.main}</mainClass>
									<addClasspath>${ciao.addClasspath}</addClasspath>
									<classpathPrefix>lib/</classpathPrefix>
								</manifest>
							</archive>
						</configuration>
					</plugin>
				
					<!-- Assemble a binary package with jar and library dependencies -->
					<plugin>
						<artifactId>maven-remote-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>process-remote-resources</id>
								<goals>
									<goal>process</goal>
								</goals>
								<configuration>
									<resourceBundles>
										<resourceBundle>${project.groupId}:ciao-parent-support:${project.version}</resourceBundle>
									</resourceBundles>
									<skip>${ciao.skipBinArchive}</skip>
									<attachToMain>false</attachToMain>
									<attachToTest>false</attachToTest>
									<outputDirectory>${project.build.directory}/ciao-parent-support</outputDirectory>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<skipAssembly>${ciao.skipBinArchive}</skipAssembly>
							<descriptors>
								<descriptor>${project.build.directory}/ciao-parent-support/assembly/bin.xml</descriptor>
							</descriptors>
						</configuration>
						<executions>
							<execution>
								<id>assemble-bin-archive</id>
								<inherited>true</inherited>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!--
			Profile which configures Sonar to pick up test coverage via jacoco
			Primarily useful when building via Jenkins
			Related properties: sonar.jacoco.reportPath 
		-->
		<profile>
			<id>sonar</id>
		
			<properties>
				<sonar.language>java</sonar.language>
				<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
				<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
			</properties>
		
			<build>
				<plugins>
					<!-- Setup jacoco to capture test coverage -->
					<plugin>
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
						<executions>
							<!-- Prepares the property pointing to the JaCoCo runtime agent which 
								is passed as VM argument when Maven the Surefire plugin is executed. -->
							<execution>
								<id>pre-unit-test</id>
								<goals>
									<goal>prepare-agent</goal>
								</goals>
								<configuration>
									<destFile>${sonar.jacoco.reportPath}</destFile>
									<append>true</append>
									<propertyName>surefireArgLine</propertyName>
								</configuration>
							</execution>
						</executions>
					</plugin>
		
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<!-- Sets the VM argument line used when unit tests are run. -->
							<argLine>${surefireArgLine}</argLine>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
